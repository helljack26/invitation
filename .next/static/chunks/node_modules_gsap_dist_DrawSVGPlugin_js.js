/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_gsap_dist_DrawSVGPlugin_js"],{

/***/ "./node_modules/gsap/dist/DrawSVGPlugin.js":
/*!*************************************************!*\
  !*** ./node_modules/gsap/dist/DrawSVGPlugin.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("(function (global, factory) {\n\t true ? factory(exports) :\n\t0;\n}(this, (function (exports) { 'use strict';\n\n\t/*!\n\t * DrawSVGPlugin 3.13.0\n\t * https://gsap.com\n\t *\n\t * @license Copyright 2008-2025, GreenSock. All rights reserved.\n\t * Subject to the terms at https://gsap.com/standard-license\n\t * @author: Jack Doyle, jack@greensock.com\n\t*/\n\tvar gsap,\n\t    _toArray,\n\t    _win,\n\t    _isEdge,\n\t    _coreInitted,\n\t    _warned,\n\t    _getStyleSaver,\n\t    _reverting,\n\t    _windowExists = function _windowExists() {\n\t  return typeof window !== \"undefined\";\n\t},\n\t    _getGSAP = function _getGSAP() {\n\t  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n\t},\n\t    _numExp = /[-+=\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/gi,\n\t    _types = {\n\t  rect: [\"width\", \"height\"],\n\t  circle: [\"r\", \"r\"],\n\t  ellipse: [\"rx\", \"ry\"],\n\t  line: [\"x2\", \"y2\"]\n\t},\n\t    _round = function _round(value) {\n\t  return Math.round(value * 10000) / 10000;\n\t},\n\t    _parseNum = function _parseNum(value) {\n\t  return parseFloat(value) || 0;\n\t},\n\t    _parseSingleVal = function _parseSingleVal(value, length) {\n\t  var num = _parseNum(value);\n\n\t  return ~value.indexOf(\"%\") ? num / 100 * length : num;\n\t},\n\t    _getAttributeAsNumber = function _getAttributeAsNumber(target, attr) {\n\t  return _parseNum(target.getAttribute(attr));\n\t},\n\t    _sqrt = Math.sqrt,\n\t    _getDistance = function _getDistance(x1, y1, x2, y2, scaleX, scaleY) {\n\t  return _sqrt(Math.pow((_parseNum(x2) - _parseNum(x1)) * scaleX, 2) + Math.pow((_parseNum(y2) - _parseNum(y1)) * scaleY, 2));\n\t},\n\t    _warn = function _warn(message) {\n\t  return console.warn(message);\n\t},\n\t    _hasNonScalingStroke = function _hasNonScalingStroke(target) {\n\t  return target.getAttribute(\"vector-effect\") === \"non-scaling-stroke\";\n\t},\n\t    _bonusValidated = 1,\n\t    _parse = function _parse(value, length, defaultStart) {\n\t  var i = value.indexOf(\" \"),\n\t      s,\n\t      e;\n\n\t  if (i < 0) {\n\t    s = defaultStart !== undefined ? defaultStart + \"\" : value;\n\t    e = value;\n\t  } else {\n\t    s = value.substr(0, i);\n\t    e = value.substr(i + 1);\n\t  }\n\n\t  s = _parseSingleVal(s, length);\n\t  e = _parseSingleVal(e, length);\n\t  return s > e ? [e, s] : [s, e];\n\t},\n\t    _getLength = function _getLength(target) {\n\t  target = _toArray(target)[0];\n\n\t  if (!target) {\n\t    return 0;\n\t  }\n\n\t  var type = target.tagName.toLowerCase(),\n\t      style = target.style,\n\t      scaleX = 1,\n\t      scaleY = 1,\n\t      length,\n\t      bbox,\n\t      points,\n\t      prevPoint,\n\t      i,\n\t      rx,\n\t      ry;\n\n\t  if (_hasNonScalingStroke(target)) {\n\t    scaleY = target.getScreenCTM();\n\t    scaleX = _sqrt(scaleY.a * scaleY.a + scaleY.b * scaleY.b);\n\t    scaleY = _sqrt(scaleY.d * scaleY.d + scaleY.c * scaleY.c);\n\t  }\n\n\t  try {\n\t    bbox = target.getBBox();\n\t  } catch (e) {\n\t    _warn(\"Some browsers won't measure invisible elements (like display:none or masks inside defs).\");\n\t  }\n\n\t  var _ref = bbox || {\n\t    x: 0,\n\t    y: 0,\n\t    width: 0,\n\t    height: 0\n\t  },\n\t      x = _ref.x,\n\t      y = _ref.y,\n\t      width = _ref.width,\n\t      height = _ref.height;\n\n\t  if ((!bbox || !width && !height) && _types[type]) {\n\t    width = _getAttributeAsNumber(target, _types[type][0]);\n\t    height = _getAttributeAsNumber(target, _types[type][1]);\n\n\t    if (type !== \"rect\" && type !== \"line\") {\n\t      width *= 2;\n\t      height *= 2;\n\t    }\n\n\t    if (type === \"line\") {\n\t      x = _getAttributeAsNumber(target, \"x1\");\n\t      y = _getAttributeAsNumber(target, \"y1\");\n\t      width = Math.abs(width - x);\n\t      height = Math.abs(height - y);\n\t    }\n\t  }\n\n\t  if (type === \"path\") {\n\t    prevPoint = style.strokeDasharray;\n\t    style.strokeDasharray = \"none\";\n\t    length = target.getTotalLength() || 0;\n\t    _round(scaleX) !== _round(scaleY) && !_warned && (_warned = 1) && _warn(\"Warning: <path> length cannot be measured when vector-effect is non-scaling-stroke and the element isn't proportionally scaled.\");\n\t    length *= (scaleX + scaleY) / 2;\n\t    style.strokeDasharray = prevPoint;\n\t  } else if (type === \"rect\") {\n\t    length = width * 2 * scaleX + height * 2 * scaleY;\n\t  } else if (type === \"line\") {\n\t    length = _getDistance(x, y, x + width, y + height, scaleX, scaleY);\n\t  } else if (type === \"polyline\" || type === \"polygon\") {\n\t    points = target.getAttribute(\"points\").match(_numExp) || [];\n\t    type === \"polygon\" && points.push(points[0], points[1]);\n\t    length = 0;\n\n\t    for (i = 2; i < points.length; i += 2) {\n\t      length += _getDistance(points[i - 2], points[i - 1], points[i], points[i + 1], scaleX, scaleY) || 0;\n\t    }\n\t  } else if (type === \"circle\" || type === \"ellipse\") {\n\t    rx = width / 2 * scaleX;\n\t    ry = height / 2 * scaleY;\n\t    length = Math.PI * (3 * (rx + ry) - _sqrt((3 * rx + ry) * (rx + 3 * ry)));\n\t  }\n\n\t  return length || 0;\n\t},\n\t    _getPosition = function _getPosition(target, length) {\n\t  target = _toArray(target)[0];\n\n\t  if (!target) {\n\t    return [0, 0];\n\t  }\n\n\t  length || (length = _getLength(target) + 1);\n\n\t  var cs = _win.getComputedStyle(target),\n\t      dash = cs.strokeDasharray || \"\",\n\t      offset = _parseNum(cs.strokeDashoffset),\n\t      i = dash.indexOf(\",\");\n\n\t  i < 0 && (i = dash.indexOf(\" \"));\n\t  dash = i < 0 ? length : _parseNum(dash.substr(0, i));\n\t  dash > length && (dash = length);\n\t  return [-offset || 0, dash - offset || 0];\n\t},\n\t    _initCore = function _initCore() {\n\t  if (_windowExists()) {\n\t    _win = window;\n\t    _coreInitted = gsap = _getGSAP();\n\t    _toArray = gsap.utils.toArray;\n\t    _getStyleSaver = gsap.core.getStyleSaver;\n\n\t    _reverting = gsap.core.reverting || function () {};\n\n\t    _isEdge = ((_win.navigator || {}).userAgent || \"\").indexOf(\"Edge\") !== -1;\n\t  }\n\t};\n\n\tvar DrawSVGPlugin = {\n\t  version: \"3.13.0\",\n\t  name: \"drawSVG\",\n\t  register: function register(core) {\n\t    gsap = core;\n\n\t    _initCore();\n\t  },\n\t  init: function init(target, value, tween, index, targets) {\n\t    if (!target.getBBox) {\n\t      return false;\n\t    }\n\n\t    _coreInitted || _initCore();\n\n\t    var length = _getLength(target),\n\t        start,\n\t        end,\n\t        cs;\n\n\t    this.styles = _getStyleSaver && _getStyleSaver(target, \"strokeDashoffset,strokeDasharray,strokeMiterlimit\");\n\t    this.tween = tween;\n\t    this._style = target.style;\n\t    this._target = target;\n\n\t    if (value + \"\" === \"true\") {\n\t      value = \"0 100%\";\n\t    } else if (!value) {\n\t      value = \"0 0\";\n\t    } else if ((value + \"\").indexOf(\" \") === -1) {\n\t      value = \"0 \" + value;\n\t    }\n\n\t    start = _getPosition(target, length);\n\t    end = _parse(value, length, start[0]);\n\t    this._length = _round(length);\n\t    this._dash = _round(start[1] - start[0]);\n\t    this._offset = _round(-start[0]);\n\t    this._dashPT = this.add(this, \"_dash\", this._dash, _round(end[1] - end[0]), 0, 0, 0, 0, 0, 1);\n\t    this._offsetPT = this.add(this, \"_offset\", this._offset, _round(-end[0]), 0, 0, 0, 0, 0, 1);\n\n\t    if (_isEdge) {\n\t      cs = _win.getComputedStyle(target);\n\n\t      if (cs.strokeLinecap !== cs.strokeLinejoin) {\n\t        end = _parseNum(cs.strokeMiterlimit);\n\t        this.add(target.style, \"strokeMiterlimit\", end, end + 0.01);\n\t      }\n\t    }\n\n\t    this._live = _hasNonScalingStroke(target) || ~(value + \"\").indexOf(\"live\");\n\t    this._nowrap = ~(value + \"\").indexOf(\"nowrap\");\n\n\t    this._props.push(\"drawSVG\");\n\n\t    return _bonusValidated;\n\t  },\n\t  render: function render(ratio, data) {\n\t    if (data.tween._time || !_reverting()) {\n\t      var pt = data._pt,\n\t          style = data._style,\n\t          length,\n\t          lengthRatio,\n\t          dash,\n\t          offset;\n\n\t      if (pt) {\n\t        if (data._live) {\n\t          length = _getLength(data._target);\n\n\t          if (length !== data._length) {\n\t            lengthRatio = length / data._length;\n\t            data._length = length;\n\n\t            if (data._offsetPT) {\n\t              data._offsetPT.s *= lengthRatio;\n\t              data._offsetPT.c *= lengthRatio;\n\t            }\n\n\t            if (data._dashPT) {\n\t              data._dashPT.s *= lengthRatio;\n\t              data._dashPT.c *= lengthRatio;\n\t            } else {\n\t              data._dash *= lengthRatio;\n\t            }\n\t          }\n\t        }\n\n\t        while (pt) {\n\t          pt.r(ratio, pt.d);\n\t          pt = pt._next;\n\t        }\n\n\t        dash = data._dash || ratio && ratio !== 1 && 0.0001 || 0;\n\t        length = data._length - dash + 0.1;\n\t        offset = data._offset;\n\t        dash && offset && dash + Math.abs(offset % data._length) > data._length - 0.05 && (offset += offset < 0 ? 0.005 : -0.005) && (length += 0.005);\n\t        style.strokeDashoffset = dash ? offset : offset + 0.001;\n\t        style.strokeDasharray = length < 0.1 ? \"none\" : dash ? dash + \"px,\" + (data._nowrap ? 999999 : length) + \"px\" : \"0px, 999999px\";\n\t      }\n\t    } else {\n\t      data.styles.revert();\n\t    }\n\t  },\n\t  getLength: _getLength,\n\t  getPosition: _getPosition\n\t};\n\t_getGSAP() && gsap.registerPlugin(DrawSVGPlugin);\n\n\texports.DrawSVGPlugin = DrawSVGPlugin;\n\texports.default = DrawSVGPlugin;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gsap/dist/DrawSVGPlugin.js\n"));

/***/ })

}]);